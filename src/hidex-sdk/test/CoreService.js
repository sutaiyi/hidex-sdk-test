export class CoreService{status="stopped";config={};eventListeners=new Map;async start(t){if("stopped"!==this.status)throw new Error("Service is already running");this.status="starting",this.config={...this.config,...t};try{await this.initialize(),this.status="running",this.emit("start",this.config)}catch(t){throw this.status="error",this.emit("error",t),t}}async stop(){if("running"!==this.status)throw new Error("Service is not running2");this.status="stopping";try{await this.cleanup(),this.status="stopped",this.emit("stop")}catch(t){throw this.status="error",this.emit("error",t),t}}getStatus(){return this.status}on(t,s){const i=this.eventListeners.get(t)||[];i.push(s),this.eventListeners.set(t,i)}async initialize(){await this.validateConfig(),await this.connectToDependencies()}async cleanup(){await this.closeConnections()}emit(t,s){const i=this.eventListeners.get(t);i&&i.forEach(t=>t(s))}async validateConfig(){}async connectToDependencies(){}async closeConnections(){}}