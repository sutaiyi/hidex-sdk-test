import{ethService as t}from"./eth/index";import{solService as e}from"./sol/index";import{defaultChainID as a}from"../common/config";import s from"./utils/approve";import{compileTransaction as i,resetInstructions as r,getTransactionsSignature as n,isInstructionsSupportReset as o,getAddressLookup as h,getOwnerTradeNonce as c}from"./sol/instruction/index";import p from"../common/eventEmitter";import l from"./sol/defiApi";import w from"./TradeHashStatusService";import{wExchange as u}from"./utils/nativeTokenTrade";import{simulateConfig as d}from"./sol/config";import{isSol as S}from"./utils";class f extends p{app;chainId;errorCode=9800;HS;solService;ethService;approve;defiApi;checkHash;constructor(i){super(),this.chainId=a,this.solService=e(i),this.ethService=t(i),this.app=102===a?this.solService:this.ethService,this.HS=i,this.approve=new s({...i,trade:this}),this.checkHash=new w({...i,trade:this}),this.defiApi=l,this.defiApi.getLatestBlockhash(this.HS.network)}resetInstructions=(t,e,a,s)=>r(t,e,a,s);getTransactionsSignature=(t,e,a,s,i,r)=>n(t,e,a,s,i,r);compileTransaction=t=>i(t,this.HS);getAddressLookup=t=>h(t,this.HS);getOwnerTradeNonce=async t=>c(this.HS.utils.ownerKeypair(await this.HS.wallet.ownerKey(t)),this.HS);isInstructionsSupportReset=(t,e)=>o(t,e);changeTradeService=a=>{switch(this.chainId=a.chainID,this.chainId){case 1:case 56:case 8453:this.ethService=t(this.HS),this.app=this.ethService;break;default:this.solService=e(this.HS),this.app=this.solService}};getBalance=async(t,e,a)=>{try{return await(this.app?.getBalance(t,e,a))||"0"}catch(t){return"0"}};getBalanceMultiple=async(t,e,a)=>await(this.app?.getBalanceMultiple(t,e,a))||[];getNetWorkFees=async(t=21e3,e)=>await(this.app?.getNetWorkFees(t,e));getSendEstimateGas=async t=>{console.log("发送前预估参数",t);const e=await(this.app?.getSendEstimateGas(t));if(e)return e;throw new Error("app undefined")};getSendFees=async(t,e,a)=>{console.log("获取发送手续费参数",t);const s=await(this.app?.getSendFees(t,e,a));if(s)return s;throw new Error("app undefined")};sendTransaction=async t=>{console.log("发送代币执行参数",t);const e=await(this.app?.sendTransaction(t));if(e)return e;throw new Error("app undefined")};getAllowance=async(t,e,a)=>{const s=await(this.app?.getAllowance(t,e,a));if(s)return s;throw new Error("app undefined")};toApprove=async(t,e,a,s)=>{console.log("授权参数",t,e,a,s);const i=await(this.app?.toApprove(t,e,a,s));if(i)return i;throw new Error("app undefined")};getSwapPath=async t=>{console.log("路由参数",t);const e=await(this.app?.getSwapPath(t));if(e)return e;throw new Error("app undefined")};getSwapEstimateGas=async(t,e,a)=>{console.log("预估参数",t,e,a);const s=await(this.app?.getSwapEstimateGas(t,e,a));if(s)return s;throw new Error("app undefined")};getSwapFees=async t=>{const e=await(this.app?.getSwapFees(t));if(e)return e;throw new Error("app undefined")};swap=async(t,e,a)=>{console.log("Swap执行参数===>",t,e,a);const s=await(this.app?.swap(t,e,a));if(s)return s;throw new Error("app undefined")};claimCommission=async t=>{const e=await(this.app?.claimCommission(t));if(e)return e;throw new Error("app undefined")};getHashStatus(t,e,a=[]){return S(e)?this.solService.hashStatus(t,e,a):this.ethService.hashStatus(t,e)}getHashsStatus(t,e,a=[]){return S(e)?this.solService.hashsStatus(t,e,a):this.ethService.hashsStatus(t,e,a)}async wrappedExchange(t,e,a,s,i="0"){const r=await this.HS.wallet.ownerKey(e);return await u(t,r,a,s,i,this.HS)}async sendSimulateTransaction(t,e){const a=await this.HS.wallet.ownerKey(t),s=this.HS.utils.ownerKeypair(a),i=await this.HS.network.getProviderByChain(102);if(i){const t=await i.simulateTransaction(e,d);if(console.log("第二次交易 - 预估",t),t&&t?.value?.err)throw new Error(JSON.stringify(t.value.logs));e.sign([s]);const a=e.serialize(),r=await i.sendRawTransaction(a);if(r){const t={error:null,result:{hash:r,data:[e]}};return console.log("第二次交易结果：",t),{error:null,result:{hash:r,data:[e]}}}}throw new Error("sendSimulateTransaction error")}}export default f;