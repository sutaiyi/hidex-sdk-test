import{Connection as r}from"@solana/web3.js";import{defaultChain as t,defaultChainID as s,quiknodeRpcs as i}from"../common/config";import{getSolanaRpcHeard as e,getSolRpcOrigin as n}from"./utils";import o from"./provider";import h from"axios";import a from"../common/eventEmitter";class c extends a{network;provider;_sysProviderRpcs;myProviders;rpcs;HS;constructor(r){super(),this.network=r.chains(s),this.provider=this.getProvider(),this._sysProviderRpcs={},this.myProviders={},this.rpcs=(()=>{const t={};for(const s of r.chains())t[s.chain]=s.rpc;return t})(),this.HS=r}getChainNameByChainId(r){let s=this.HS.chains(r)?.chain;if(!s){const t=this.HS.chains().find(t=>t.codexChainId===r);t&&(s=t.chain)}return s||t}getChainIdByChainName(r){return this.HS.chains(r)?.chainID||s}getCodexChainIdByChain(r){let t=this.HS.chains(r);if(t)return t.codexChainId;throw new Error("chain not found")}getOkxChainIdByChain(r){let t=this.HS.chains(r);if(t)return t.okxChainId;throw new Error("chain not found")}get sysProviderRpcs(){if(void 0===this._sysProviderRpcs.BSC||0===this._sysProviderRpcs.BSC.length)for(const r of Object.keys(this.rpcs))this._sysProviderRpcs[r]=this.getChainProviderFromRpcs(r);else this._sysProviderRpcs.SOLANA=this.getChainProviderFromRpcs("SOLANA");return this._sysProviderRpcs}set sysProviderRpcs(r){this._sysProviderRpcs=r}async choose(r){try{return this.network=this.HS.chains(r),this.HS.networkChange(this.network),this.provider=this.getProvider(!0),this.network}catch(r){throw new Error("Choose network error")}}get(r){return r?this.HS.chains(r):this.network}getProvider(r=!1){try{let t=this.network?.rpc[0];return this.myProviders[this.network.chain.toLowerCase()]&&!r&&"solana"!==this.network.chain.toLowerCase()?(this.provider=this.myProviders[this.network.chain.toLowerCase()],this.provider):102===this.network.chainID?("/solana_new"===t&&(t=`${n(this.HS.env,this.HS.apparatus)}/solana_new`),this.provider=this.solanaConnect(t,"confirmed"),this.myProviders[this.network.chain.toLowerCase()]=this.provider,this.provider):(this.provider=new o(t,this.network.chainID),this.myProviders[this.network.chain.toLowerCase()]=this.provider,this.provider)}catch(r){return new Error(r.message||"Network error")}}getProviderByChain(r,t="confirmed"){try{const s=this.HS.chains(r);let i=s.rpc[0];const e=s.chainID,h=this.getChainNameByChainId(e);if(this._sysProviderRpcs[h]?.length>0)return this.sysProviderRpcs[h][0];if(102===e){"/solana_new"===i&&(i=`${n(this.HS.env,this.HS.apparatus)}/solana_new`);return this.solanaConnect(i,t)}return new o(i,e)}catch(r){return null}}getClipProviderByChain(r){try{const t=this.HS.chains(r),s=t.chain;let e=i[s];const n=t.chainID;return new o(e,n)}catch(r){return null}}getProviderByChainByRpc(r,t){try{const s=this.HS.chains(r).chainID;if(102===s){"/solana_new"===t&&(t=`${n(this.HS.env,this.HS.apparatus)}/solana_new`);return this.solanaConnect(t)}return new o(t,s)}catch(r){return console.error("GetProviderByChainByRpc Error",r),null}}async getFastestProviderByChain(r,t="confirmed"){try{let s=await this.getFastestRpc(r);const i=this.HS.chains(r).chainID;if(102===i){"/solana_new"===s&&(s=`${n(this.HS.env,this.HS.apparatus)}/solana_new`);return this.solanaConnect(s,t)}return new o(s,i)}catch(r){return null}}async getFastestRpc(r){let t="eth_blockNumber";const s=this.HS.chains(r);102===s.chainID&&(t="getLatestBlockhash");const i=s.rpc,o=async r=>{"/solana_new"===r&&(r=`${n(this.HS.env,this.HS.apparatus)}/solana_new`);try{return await h.post(r,{jsonrpc:"2.0",method:t,params:[],id:1},{headers:{"Content-Type":"application/json",...e()}})}catch(r){throw new Error(r.message||"Network error")}},a=i.map(r=>o(r).then(t=>{if(200===t.status&&t.data.id&&!t.data.error)return Promise.resolve(r),r;throw new Error("Network error")}).catch(r=>Promise.reject(r)));return await Promise.any(a)}async rpcProviderInit(){for(const r of this.HS.chains()){const t=r.rpc;t&&t.length>0?this.rpcs[r.chain]=t:this.rpcs[r.chain]=r.rpc;const s=this.getChainProviderFromRpcs(r.chain);this._sysProviderRpcs[r.chain]=s}return this._sysProviderRpcs}getChainProviderFromRpcs(r){const t=[];for(const s in this.rpcs[r]){const i=this.rpcs[r][s];if(i){const s=this.getProviderByChainByRpc(r,i);s&&t.push(s)}}return t}solanaConnect(t,s="confirmed"){return new r(t,{commitment:s,httpHeaders:{"Content-Type":"application/json",...e()},confirmTransactionInitialTimeout:15e3})}getChainIds=()=>this.HS.chains().map(r=>r.chainID);getCodexChainIds=()=>this.HS.chains().map(r=>r.codexChainId);getChainList=()=>this.HS.chains()}export default c;